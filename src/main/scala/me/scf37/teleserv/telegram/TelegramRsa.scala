package me.scf37.teleserv.telegram

import java.security.KeyFactory
import java.security.MessageDigest
import java.security.PrivateKey
import java.security.PublicKey
import java.security.spec.PKCS8EncodedKeySpec
import java.security.spec.RSAPublicKeySpec

import scodec.bits.BitVector
import scodec.bits.ByteVector

/**
  * RSA key to use with telegram server
  *
  */
case class TelegramRsa(
  publicKeyMod: Array[Byte],
  publicKeyExp: Array[Byte],
  privateKeyBytes: Array[Byte]
) {
  /** RSA public key fingerprint as per telegram spec */
  val fingerprint: Long = {
    val encodedKey = TString.codec.encode(TString(ByteVector(publicKeyMod))).require ++
      TString.codec.encode(TString(ByteVector(publicKeyExp))).require

    val sha = MessageDigest.getInstance("SHA1")
    val digest = sha.digest(encodedKey.toByteArray)

    scodec.codecs.longL(64).decode(BitVector(digest.takeRight(8))).require.value
  }

  val privateKey: PrivateKey = {
    val kf = KeyFactory.getInstance("RSA")
    kf.generatePrivate(new PKCS8EncodedKeySpec(privateKeyBytes))
  }

  val publicKey: PublicKey = {
    val kf = KeyFactory.getInstance("RSA")
    kf.generatePublic(new RSAPublicKeySpec(
      new java.math.BigInteger(publicKeyMod), new java.math.BigInteger(publicKeyExp)))
  }
}

object TelegramRsa {

  // key pair for our protocol
  val key = TelegramRsa(
    publicKeyMod = toArray("00E19E4F19A12F916226ACADEDF5704A4E5054E897F16C173E392AFDE0B371079D5CB26F5CFBE1D0C6C232944CE35EDB047AB32AA3ACF1E6DF33AAA37E614EC57B74BF50EF4C68EC0F2EB3014526A0E2CE80F8B3C567E9B5A7D61D382BA62E8E79EE66C305196DED5C82F66F7E32F03FCBF86D0D7C52179CBD64E45CE6CE87709BF784826285FD8CBB28A11793C94E1240A0993672DD62B1E9AD1818E4E53C98EC0E800C3034E63D1741FF7C2B09050F325DDC49D9DAD308AE2F46D5662A2F55A7AD067794A59DB74D6A3AB8A43E34610A7597D8BC1989E83D0590D0F1E9DFAED20BB09A3DC448AE7AE7A899FCFF54FC28CABCE34055266D735F4ADE6131465B59"),
    publicKeyExp = toArray("00010001"),
    privateKeyBytes = toArray
  )

  private def toArray(s: String): Array[Byte] = s.grouped(2).map(Integer.parseInt(_, 16).toByte).toArray
}
